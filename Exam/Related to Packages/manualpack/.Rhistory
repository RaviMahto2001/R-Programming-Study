ggplot(crab_long,aes(Date,-value,group = variable)) + geom_line()
ggplot(crab_long,aes(Date,-value,group = variable)) + geom_ribbon()
ggplot(crab_tag$daylog,aes(Date,ymin = -Max.Depth,ymax = -Min.Depth)) + geom_ribbon(fill = "white",col = "black")
ggplot(crab_tag$daylog,aes(Date,ymax = -Max.Depth,ymin = -Min.Depth)) + geom_ribbon(fill = "white",col = "black")
str(obama_vs_mccain)
hist(obama_vs_mccain$Obama)
quantile(obama_vs_mccain$Obama)
obama_vs_mccain$Obama
hist(obama_vs_mccain$Obama, main("Histogram of Obama"))
hist(obama_vs_mccain$Obama, main = "Histogram of Obama")
hist(obama_vs_mccain$Obama, main = "Histogram of Obama",xlab = "Voter Turnout",ylab = "No of Region")
hist(obama_vs_mccain$Obama)
hist(obama_vs_mccain$Obama,5)
hist(obama_vs_mccain$Obama,10)
hist(obama_vs_mccain$Obama,seq.int(0,100,4))
hist(obama_vs_mccain$Obama)
hist(obama_vs_mccain$Obama,5)
hist(obama_vs_mccain$Obama,20)
hist(obama_vs_mccain$Obama,3)
hist(obama_vs_mccain$Obama,2)
hist(obama_vs_mccain$Obama,3)
histogram(obama_vs_mccain$Obama)
hist(obama_vs_mccain$Obama,"scott")
hist(obama_vs_mccain$Obama,nclass.Sturges)
hist(obama_vs_mccain$Obama,nclass.Sturges())
hist(obama_vs_mccain$Obama,nclass.Sturges)
histogram(~Obama,obama_vs_mccain$Obama)
histogram(~Obama,obama_vs_mccain)
ggplot(obama_vs_mccain,aes(Obama)) + geom_histogram()
ggplot(obama_vs_mccain,aes(Obama)) + geom_histogram(binwidth = 5)
quantile(obama_vs_mccain$Obama)
sort(obama_vs_mccain$Obama)
boxplot(obama_vs_mccain$Obama)
bwplot(Obama,obama_vs_mccain)
bwplot(~Obama,obama_vs_mccain)
ggplot(obama_vs_mccain,aes(Obama)) + geom_boxplot()
ggplot(obama_vs_mccain,aes(y = "Obama")) + geom_boxplot()
ggplot(obama_vs_mccain,aes(y = Obama)) + geom_boxplot()
ggplot(obama_vs_mccain,aes(Obama)) + geom_boxplot()
library(learningr)
library(lattice)
library(ggplot2)
histogram(~obama,obama_vs_mccain)
histogram(~Obama,obama_vs_mccain)
histogram(obama_vs_mccain$Obama)
ggplot(obama_vs_mccain,aes(Obama)) + geom_histogram(binwidth = 5)
ggplot(obama_vs_mccain,aes(Obama)) + geom_histogram()
ggplot(obama_vs_mccain,aes(Obama)) + geom_histogram()
maxtemp <- c('sun'= 24,'mon' = 23, 'tue' = 24, 'wed' = 25,'thus' = 21,'fri' = 27,'sat' = 20)
maxtemp
barplot(MAXTEMP)
barplot(maxtemp)
barchart(maxtmep)
barchart(maxtemp)
pie(maxtemp)
layout(matrix(1:2,nrow=1))
layout(matrix(1:2,1))
barchart(maxtemp)
layout(matrix(1:2,1))
matrix(1:2,1)
layout(matrix(1:2,1))
layout(matrix(1:2,1))
gc()
gc()
download.file("https://www.kaggle.com/carlolepelaars/toy-dataset")
download.file("https://www.kaggle.com/carlolepelaars/toy-dataset","F:\studyfiles\R Programming")
download.file("https://www.kaggle.com/carlolepelaars/toy-dataset","F:\\studyfiles\\R Programming")
getwd()
toy_dataset <- read.csv("F:\studyfiles\R Programming\toy_dataset.csv")
toy_dataset <- read.csv("F:\\studyfiles\\R Programming\\toy_dataset.csv")
toy_dataset <- read.csv("F:\\studyfiles\\R Programming\\toy_dataset.csv")
str(toy_dataset)
str(toy_dataset)
attach(toy_dataset)
Number
City
Gender
Age
Income
Illness
length(subset(toy_dataset,City == 'New York'))
length(subset(City,City == 'New York'))
subset(toy_dataset,City == 'New York')
subset(toy_dataset,City = 'New York')
subset(toy_dataset,toy_dataset$City == 'New York')
df
df
subset(df, domain == "England")
str(df)
subset(toy_dataset, City == 'New York', City)
detach(toy_dataset)
subset(toy_dataset, City == 'New York', City)
# c) Count the number of rows with City = New York City.
toy_dataset
subset(toy_dataset, City == "New York", City)
subset(toy_dataset, City == "NewYork", City)
length(subset(toy_dataset, City == "New York"))
City
length(subset(toy_dataset, Income > avg(toy_dataset$Income)))
avg(toy_dataset$Income)
length(subset(toy_dataset, Income > mean(toy_dataset$Income)))
subset(toy_dataset, City == "New York")
subset(toy_dataset, Income > mean(toy_dataset$Income))
mean(toy_dataset$Income)
nrow(subset(toy_dataset, Income > mean(toy_dataset$Income)))
df
subset(df, domain == "England")
size(subset(toy_dataset, Income > mean(toy_dataset$Income)))
# f) Find the highest salary for the female population.
size(1:10)
str_count(subset(toy_dataset, Income > mean(toy_dataset$Income)))
sum(subset(toy_dataset, Income > mean(toy_dataset$Income)))
nrow(subset(toy_dataset, Income > mean(toy_dataset$Income)))
subset(toy_dataset,Gender = "Female",Income)
subset(toy_dataset,Gender == "Female",Income)
subset(toy_dataset,Gender == "Female")
max(subset(toy_dataset,Gender == "Female")$Income)
max(subset(toy_dataset, Gender == "Female")$Income)
subset(toy_dataset, City == "New York")
subset(toy_dataset, City == "New York")
toy_dataset[sample(nrow(toy_dataset),10),]
subset(toy_dataset, City == "New York City")
size(subset(toy_dataset, City == "New York City"))
nrow(subset(toy_dataset, City == "New York City"))
nrow(subset(toy_dataset, City == "New York City"))
toy_dataset[sample(nrow(toy_dataset),10),]
detach(toy_dataset)
toy_dataset[sample(nrow(toy_dataset),10),]
toy_dataset[sample(nrow(toy_dataset),10),]
toy_dataset[c(integer(runif(10,1,nrow(toy_dataset))))]
toy_dataset[runif(10,1,nrow(toy_dataset))]
toy_dataset[runif(10,min = 1,max = nrow(toy_dataset))]
runif(10,min = 1,max = nrow(toy_dataset))
toy_dataset[as.integer(runif(10,min = 1,max = nrow(toy_dataset)))]
toy_dataset[as.integer(runif(10,min = 1,max = nrow(toy_dataset))),]
toy_dataset[runif(10,min = 1,max = nrow(toy_dataset)),]
order(toy_dataset,decreasing = TRUE)
# d) Display rows that have top 5 income values.
install.packages("dplyr")
library(dplyr)
arrange(desc(toy_dataset$Income))
arrange(desc(toy_dataset))
order(toy_dataset$Income,decreasing = TRUE)
attach(toy_dataset)
detach(toy_dataset)
attach(toy_dataset)
# attach function is used to attach the data frame object to the environment.
# what attaching means?
# the variables in the dataset are directly accessible by their name.
Income
nrow(subset(toy_dataset, City == "New York City"))
attach(toy_dataset)
order(Income,decreasing = TRUE)
order(Income)
order(Income,decreasing = TRUE)
toy_dataset[order(Income,decreasing = TRUE)[1:5]]
toy_dataset[order(Income,decreasing = TRUE)]
order(toy_dataset$Income,decreasing = TRUE)
toy_dataset[109351]
toy_dataset[109351,]
max(toy_dataset$Income)
order(toy_dataset$Income)
toy_dataset[246,]
df <- data.frame(1:10,c(2,6,12,34,11,35,87,45,23.10))
df <- data.frame(1:10,c(2,6,12,34,11,35,87,45,23,10))
df <- data.frame("a" = c(1:10),"b" = c(2,6,12,34,11,35,87,45,23,10))
order(df$b)
df <- data.frame("a" = c(1:10),"b" = c(20,6,12,34,11,35,87,45,23,10))
order(df$b)
order(df$b,decreasing = TRUE)
df[order(df$b,decreasing = TRUE),]
order(df$b,decreasing = TRUE)
head(order(df$b,decreasing = TRUE),5)
head(df[order(df$b,decreasing = TRUE),],5)
head(toy_dataset[order(toy_dataset$Income,decreasing = TRUE),],5)
head(toy_dataset[order(toy_dataset$Income,decreasing = TRUE),Income],5)
head(toy_dataset[order(toy_dataset$Income,decreasing = TRUE),5],5)
toy_dataset[order(toy_dataset$Income,decreasing = TRUE)[1:5],5]
myhypotenuous <- function(x,y){
sqrt(x*x + y*y)
}
myhypotenuous(12,5)
sqrt(100)
do.call(myhypotenuse,list(3,4))
do.call(myhypotenuse(),list(3,4))
#user defined function
myhypotenuse <- function(x,y){
sqrt(x*x + y*y)
}
myhypotenuse(12,5)
do.call(myhypotenuse ,list(3,4))
args(myhypotenuse)
View(myhypotenuous)
View(myhypotenuous)
args(myhypotenuse)
formals(myhypotenuse)
formalArgs(myhypotenuse)
# Working on Strings
str1 <- "Hi Clashers"
str1
str2
str2 <- "Have a nice Luck!"
str2
paste(str1,str2)
paste(str1,str2,',')
paste(str1,str2,separater = ',')
paste(str1,str2,sep = ',')
paste0(str1,str2)
toString(1:10)
toString(1:20)
1:20
toString(1:20, width = 20)
airquality
str(airquality)
nrow(airquality)
na.omit(airquality)
clean_airquality <- na.omit(airquality)
sum(clean_airquality)
sum(clean_airquality$Ozone)
nrow(clean_airquality)
str(airquality)
subset(airquality,70 <= Temp <= 80,)
subset(airquality,70 <= Temp <= 80)
subset(airquality,70 <= Temp & Temp <= 80)
nrow(subset(airquality, Month == 5))
head(airquality,5)
airquality[1:10,]
head(airquality,10)
summary(airquality$Wind)
order(airquality$Temp, decreasing = TRUE)
airquality[order(airquality$Temp, decreasing = TRUE),]
aq <- airquality
airquality
aq[154] <- list(15,200,12.5,75,8,27)
aq[154,] <- list(15,200,12.5,75,8,27)
aq
vec1 <- 1:154
aq[,7] <- vec1
aq
vec1 <- 1:100
aq[,8] <- vec1
aq <- aq[,c(1:6)]
aq
max(subset(toy_dataset, Gender == "Female",Income))
# or
toy_dataset[sample(1:max = nrow(toy_dataset),10),]
# or
toy_dataset[sample(1:nrow(toy_dataset),10),]
library(sqldf)
install.packages("sqldf")
library(sqldf)
# Practical 7
Alcohol <- read.delim("F:\\studyfiles\\R Programming\\Alcohol.txt")
Alcohol
query1 <- "select * from (select Year,Country ,max(Beer) from Alcohol group by Year) as a
inner join (select Year,Country,min(Wine) from Alcohol group by Year) as b on a.Year=b.Year"
sqldf(query1)
query2 <- "select Country,(sum(Beer)+sum(Wine)+sum(Spirit))/3 as Average from Alcohol group by Country"
sqldf(query2)
query3 <- "select * from Alcohol where Country='NewZealand' and year=(select Year from Alcohol where Country='NewZealand' and Spirit>(select avg(Spirit) from Alcohol where Country='NewZealand'))"
sqldf(query3)
sub_Aus <- subset(Alcohol,Alcohol$Country=="Australia")
sub_New <- subset(Alcohol,Alcohol$Country=="NewZealand")
x1 <- c("Beer"=mean(sub_Aus$Beer),"Wine"=mean(sub_Aus$Wine),"Spirit"=mean(sub_Aus$Spirit))
x2 <- c("Beer"=mean(sub_New$Beer),"Wine"=mean(sub_New$Wine),"Spirit"=mean(sub_New$Spirit))
barplot(x1, main = "Australia Alcohol Consumption")
barplot(x2, main = "New Zealand Alcohol Consumption")
barplot(x1, main = "Australia Alcohol Consumption")
barplot(x2, main = "New Zealand Alcohol Consumption")
# i)
mat1 <- matrix(10:21, c(3,4))
mat1
mat1 <- mat1[-1,]
mat1
t(mat1)
# i)
mat1 <- matrix(10:21, c(3,4))
mat1
con <- dbConnect(MySQL(),
host="127.0.0.1",
user = "root",
password = "Dear@ravi2001",
dbname = "Practice")
library(DBI)
library(RMySQL)
con <- dbConnect(MySQL(),
host="127.0.0.1",
user = "root",
password = "Dear@ravi2001",
dbname = "Practice")
con <- dbConnect(MySQL(),
host="127.0.0.1",
user = "root",
password = "Dear@ravi2001",
dbname = "Practice")
summary(con)
iris
df <- iris[1:10,]
df
df <- sample(iris,10)
df <- iris[sample(nrow(iris),10),]
df
dblist
dbListConnections(MySQL())
dbListTables(con)
dbWriteTable(con,"STable",df)
con <- dbConnect(MySQL(),
host="127.0.0.1",
user = "root",
password = "Dear@ravi2001",
dbname = "Art_Museum")
summary(con)
dbListTables(con)
dbReadTable(con,"Art_object")
con <- dbConnect(MySQL(),
host="localhost",
user = "root",
password = "Dear@ravi2001",
dbname = "Practice")
summary(con)
iris
df <- iris[sample(nrow(iris),10),]
df
dbListTables(con)
dbSendQuery(con,"Drop table stable;")
dbListTables(con)
dbWriteTable(con,"STable",df)
dbListTables(con)
dbSendQuery(con,"select * from stable;")
dbGetQuery(con,"select * from stable;")
dbGetQuery(con,"select * from stable;")
dbSendQuery(con,"select * from stable;")
dbDisconnect(con)
con <- dbConnect(MySQL(),
host="localhost",
user = "root",
password = "Dear@ravi2001",
dbname = "Practice")
summary(con)
dbListTables(con)
fetch(res,n=5);
res <- dbSendQuery(con,"select * from stable;")
fetch(res,n=5);
res <- dbSendQuery(con,"drop table stable;")
dbListTables(con)
dbSendQuery(con,"create table stable
( Name varchar(20),
cgpa int);")
dbListTables(con)
tables <- dbListTables(con)
str(tables)
dbSendQuery(con,"insert into stable values('Raviz',10);")
dbSendQuery(con,"insert into stable values('Ravix',8);")
dbSendQuery(con,"insert into stable values('Raviy',9.5);")
res <- dbSendQuery(con,"select * from stable")
fetch(res,n=-1);
fetch(res,n=2)
res <- dbSendQuery(con,"select * from stable")
fetch(res,n=2)
dbGetQuery(con,"select * from stable where cgpa > 9;")
res <- dbGetQuery(con,"select * from stable where cgpa > 9;")
dbClearResult(res)
res <- dbGetQuery(con,"select * from stable where cgpa > 9;")
fetch(res)
fetch(res,n=-1)
res <- dbGetQuery(con,"select * from stable where cgpa > 9;")
fetch(res,n=-1)
res
# approach 2 using RSQLite
library(DBI)
library(RSQLite)
detach("package:RMySQL", unload = TRUE)
# approach 2 using RSQLite
library(DBI)
library(RSQLite)
# approach 2 using RSQLite
detach("package:RMySQL",unload = TRUE)
library(RMySQL)
# approach 2 using RSQLite
detach("package:RMySQL",unload = TRUE)
library(DBI)
library(RSQLite)
con <- dbConnect(SQLite(),"Practice")
summary(con)
dbListTables(con)
dbSendQuery(con,"create table stable
( Name varchar(20),
cgpa int);")
dbSendQuery(con,"insert into stable values('Raviz',10);")
res <- dbSendQuery(con,"create table stable
( Name varchar(20),
cgpa int);")
dbClearResult(res)
dbListTables(con)
dbSendQuery(con,"drop table stable;")
dbDisconnect(con)
con <- dbConnect(SQLite(),"Practice")
summary(con)
dbListTables(con)
res <- dbSendQuery(con,"create table stable
( Name varchar(20),
cgpa int);")
dbClearResult(res)
dbSendQuery(con,"insert into stable values('Raviz',10);")
dbSendQuery(con,"insert into stable values('Ravix',8);")
dbSendQuery(con,"insert into stable values('Raviy',9.5);")
res <- dbSendQuery(con,"drop table stable;")
dbClearResult(res)
res <- dbSendQuery(con,"create table stable
( Name varchar(20),
cgpa int);")
dbClearResult(res)
res <- dbSendQuery(con,"insert into stable values('Raviz',10);")
dbClearResult(res)
res <- dbSendQuery(con,"insert into stable values('Ravix',8);")
dbClearResult(res)
res <- dbSendQuery(con,"insert into stable values('Raviy',9.5);")
dbClearResult(res)
dbListTables(con)
# dbSendQuery return result set that need to be cleared after use
# use fetch thing here
res <- dbSendQuery(con,"select * from stable")
fetch(res,n=-1)
dbClearResult(res)
# dataframe return, here fetch will not work
res <- dbGetQuery(con,"select * from stable where cgpa > 9;")
res
dbDisconnect(con)
summary(con)
# Best approach
con <- dbConnect(SQLite(),"Practice")
summary(con)
dbListTables(con)
res <- dbSendQuery(con,"drop table stable;")
dbClearResult(res)
res <- dbSendQuery(con,"create table stable
( Name varchar(20),
cgpa int);")
dbClearResult(res)
# function to send query safely
sendqueryfun <- function(query)(
res <- dbSendQuery(con,query)
dbClearResult(res)
)
# function to send query safely
sendqueryfun <- function(query){
res <- dbSendQuery(con,query)
dbClearResult(res)
}
sendqueryfun("insert into stable values('Raviy',9.5);")
sendqueryfun("insert into stable values('Ravix',8);")
sendqueryfun("insert into stable values('Raviz',10);")
sendqueryfun("select * from stable;")
dbGetQuery(con,"select * from stable;")
dbReadTable(con,"stable")
dbDisconnect(con)
hypotenuse <- function(x,y){
sqrt(x^2 + y^2)
}
triplets <- data.frame(
x = c(3,5,6),
y = c(4,12,8),
z = c(5,13,10)
)
hypotenuse <- function(x,y){
sqrt(x^2 + y^2)
}
package.skeleton("pythagoras",c("hypotenuse","triplets"))
getwd()
setwd("F:\studyfiles\R Programming\Exam\Related to Packages\manualpack")
setwd("F:\\studyfiles\\R Programming\\Exam\\Related to Packages\\manualpack")
getwd()
package.skeleton("pythagoras",c("hypotenuse","triplets"))
roxygenize("hypotenuse")
library(roxygen2)
roxygenize("hypotenuse")
roxygenize("pythagoras")
rm(list = c("hypotenuse"))
roxygenize("pythagoras")
library(devtools)
library(usethis)
library(devtools)
check("pythagoras")
roxygenize("pythagoras")
check("pythagoras")
.Last.error.trace
roxygenize("pythagoras")
check("pythagoras")
triplets <- data.frame(
x = c(3,5,6),
y = c(4,12,8),
z = c(5,13,10)
)
#'This is a Sample Function
#'@export
#'@param x numeric variable
#'@param y numeric variable
hypotenuse <- function(x,y){
sqrt(x^2 + y^2)
}
hypotenuse(3,4)
roxygenize("pythagoras")
yes
check("pythagoras")
roxygenize("pythagoras")
check("pythagoras")
build("pythagoras")
release("pythagoras")
pythagoras::triplets
library(pythagoras)
triplets
hypotenuse(12,13)
